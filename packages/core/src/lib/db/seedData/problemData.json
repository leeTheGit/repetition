[
  {
    "id": 24,
    "uuid": "04fb6b21-daa1-44aa-82dc-0bc2e92e0e46",
    "name": "Reorder List",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "7a306928-6595-40f0-ae19-58b96759be17",
    "categorySlug": "linked-list",
    "slug": "reorder-list",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Linked List",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 12,
    "uuid": "06de6b30-b8cb-4b00-bb8d-c35358c8a7c9",
    "name": "Container With Most Water",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "ec4b276a-feec-4529-80e1-5475e299ea0f",
    "categorySlug": "two-pointers",
    "slug": "container-with-most-water",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Two Pointers",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 39,
    "uuid": "07b8d81b-ec40-4dee-91ab-e5cb73aff879",
    "name": "Kth Smallest Element In a BST",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "81b8e5e4-1dce-471f-8229-868c18b05ed7",
    "categorySlug": "trees",
    "slug": "kth-smallest-element-in-a-bst",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Trees",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 43,
    "uuid": "0c926d3b-0564-4f6d-a941-7c29965ea1b9",
    "name": "Number of Islands",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "be4df1a2-2e5a-4df0-b6a8-f1881c2f25fa",
    "categorySlug": "graphs",
    "slug": "number-of-islands",
    "description": "<p>Given a 2D grid&nbsp;<code class=\"hljs language-css\">grid</code>&nbsp;where&nbsp;<code class=\"hljs language-scheme\">'1'</code>&nbsp;represents land and&nbsp;<code class=\"hljs language-scheme\">'0'</code>&nbsp;represents water, count and return the number of islands.</p>\n<p>An&nbsp;<strong>island</strong> is formed by connecting adjacent lands horizontally or vertically and is surrounded by water. You may assume water is surrounding the grid (i.e., all the edges are water).</p>\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> grid <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n</code></pre>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"><button class=\"copy-to-clipboard-button\" type=\"button\" data-copy-state=\"copy\">Copy</button></div>\n</div>\n</div>\n<p><strong>Example 2:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> grid <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span></code></pre>\n</div>",
    "starterCode": "class Solution {\n    /**\n     * @param {character[][]} grid\n     * @return {number}\n     */\n    numIslands(grid) {}\n}\n",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "https://neetcode.io/problems/count-number-of-islands",
    "submissions": [
      {
        "grade": 4,
        "submittedAt": "2024-08-07T02:44:25.974Z",
        "solution": "class Solution {\n    /**\n     * @param {character[][]} grid\n     * @return {number}\n     */\n    numIslands(grid) {}\n}\n",
        "note": ""
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-07 02:44:25.974",
    "category": "Graphs",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 48,
    "uuid": "0cfa26e0-49b4-47b3-a46b-53322eb94a16",
    "name": "Course Schedule",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "be4df1a2-2e5a-4df0-b6a8-f1881c2f25fa",
    "categorySlug": "graphs",
    "slug": "course-schedule",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Graphs",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 29,
    "uuid": "12984c23-7f43-4dd1-a5c6-cf0e10e3bbfa",
    "name": "Maximum Depth of Binary tree",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "81b8e5e4-1dce-471f-8229-868c18b05ed7",
    "categorySlug": "trees",
    "slug": "maximum-depth-of-binary-tree",
    "description": "",
    "starterCode": "",
    "difficulty": 1,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Trees",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 31,
    "uuid": "29eec163-ab33-472f-9efc-c1bce1e96f89",
    "name": "Balanced Binary Tree",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "81b8e5e4-1dce-471f-8229-868c18b05ed7",
    "categorySlug": "trees",
    "slug": "balanced-binary-tree",
    "description": "",
    "starterCode": "",
    "difficulty": 1,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Trees",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 32,
    "uuid": "2a07dfcd-f06f-4adf-8b4d-56fc141cefe2",
    "name": "Same Tree",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "81b8e5e4-1dce-471f-8229-868c18b05ed7",
    "categorySlug": "trees",
    "slug": "same-tree",
    "description": "",
    "starterCode": "",
    "difficulty": 1,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Trees",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 40,
    "uuid": "2b866181-d281-40ea-bea6-4e6e7fe0413c",
    "name": "Kth Largest Element In a Stream",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "6d674824-a959-4cbc-9111-237d8d1b788f",
    "categorySlug": "heap-priority-queue",
    "slug": "kth-largest-element-in-a-stream",
    "description": "",
    "starterCode": "",
    "difficulty": 1,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Heap / Priority Queue",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 51,
    "uuid": "394f08b1-a393-412b-bf6d-4374985a5c90",
    "name": "Get Value at Index",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "7a306928-6595-40f0-ae19-58b96759be17",
    "categorySlug": "linked-list",
    "slug": "get-value-at-index",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [
      {
        "grade": 5,
        "submittedAt": "2024-08-06T23:16:39.538Z",
        "solution": null,
        "note": ""
      },
      {
        "grade": 5,
        "submittedAt": "2024-07-30T01:52:10.930Z",
        "solution": null,
        "note": null
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-06 23:16:39.538",
    "category": "Linked List",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 37,
    "uuid": "3d31f451-62aa-4cae-8aad-4b217d959673",
    "name": "Count Good Nodes In Binary Tree",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "81b8e5e4-1dce-471f-8229-868c18b05ed7",
    "categorySlug": "trees",
    "slug": "count-good-nodes-in-binary-tree",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Trees",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 26,
    "uuid": "3e80db2e-f09a-4d14-a82b-696c9bcf80ee",
    "name": "Linked List Cycle",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "7a306928-6595-40f0-ae19-58b96759be17",
    "categorySlug": "linked-list",
    "slug": "linked-list-cycle",
    "description": "<p>Given the beginning of a linked list&nbsp;<code class=\"hljs language-bash\"><span class=\"token function\">head</span></code>, return&nbsp;<code class=\"hljs language-java\"><span class=\"token boolean\">true</span></code>&nbsp;if there is a cycle in the linked list. Otherwise, return&nbsp;<code class=\"hljs language-java\"><span class=\"token boolean\">false</span></code>.</p>\n<p>There is a cycle in a linked list if at least one node in the list that can be visited again by following the&nbsp;<code class=\"hljs language-python\"><span class=\"token builtin\">next</span></code>&nbsp;pointer.</p>\n<p>Internally,&nbsp;<code class=\"hljs language-axapta\">index</code>&nbsp;determines the index of the beginning of the cycle, if it exists. The tail node of the list will set it's&nbsp;<code class=\"hljs language-python\"><span class=\"token builtin\">next</span></code>&nbsp;pointer to the&nbsp;<code class=\"hljs language-vim\">index-th</code>&nbsp;node. If&nbsp;<code class=\"hljs language-abnf\">index = -1</code>, then the tail node points to&nbsp;<code class=\"hljs language-java\"><span class=\"token keyword\">null</span></code>&nbsp;and no cycle exists.</p>\n<p><strong>Note:</strong>&nbsp;<code class=\"hljs language-axapta\">index</code>&nbsp;is&nbsp;<strong>not</strong> given to you as a parameter.</p>",
    "starterCode": "",
    "difficulty": 1,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "https://neetcode.io/problems/linked-list-cycle-detection",
    "submissions": [
      {
        "grade": 4,
        "submittedAt": "2024-08-06T23:22:59.486Z",
        "solution": null,
        "note": ""
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-06 23:22:59.485",
    "category": "Linked List",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 52,
    "uuid": "48d6f46e-5cc2-4b25-9bc2-ec1b122261f8",
    "name": "Has Path",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "be4df1a2-2e5a-4df0-b6a8-f1881c2f25fa",
    "categorySlug": "graphs",
    "slug": "has-path",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [
      {
        "grade": 3,
        "submittedAt": "2024-08-07T22:30:58.511Z",
        "solution": null,
        "note": ""
      },
      {
        "grade": 5,
        "submittedAt": "2024-07-30T01:52:10.931Z",
        "solution": null,
        "note": null
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-07 22:30:58.512",
    "category": "Graphs",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 54,
    "uuid": "49484c5f-dd5f-4491-8f29-2258b918f5b6",
    "name": "String Encode and Decode",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "8a0a2ece-2c33-4b98-837a-45b00aa25c51",
    "categorySlug": "arrays-and-hashing",
    "slug": "string-encode-and-decode",
    "description": "<p>Design an algorithm to encode a list of strings to a single string. The encoded string is then decoded back to the original list of strings.</p>\n<p>Please implement&nbsp;<code class=\"hljs language-ebnf\">encode</code>&nbsp;and&nbsp;<code class=\"hljs language-arcade\">decode</code></p>\n<p><strong>Example 1:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"neet\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"love\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"you\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"neet\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"love\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"you\"</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"><button class=\"copy-to-clipboard-button\" type=\"button\" data-copy-state=\"copy\">Copy</button></div>\n</div>\n</div>\n<p><strong>Example 2:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"we\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"say\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"yes\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"we\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"say\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"yes\"</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"><button class=\"copy-to-clipboard-button\" type=\"button\" data-copy-state=\"copy\">Copy</button></div>\n</div>\n</div>",
    "starterCode": "\nclass Solution {\n    /**\n     * @param {ListNode} head\n     * @return {number}\n     */\n\n    encode(strs) {}\n\n    /**\n     * @param {string} str\n     * @returns {string[]}\n     */\n    decode(str) {}\n\n}\n",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [\"we\", \"always-say\", \":\", \"yes\"], // input for test 1\n    ]\n\n    let answers = [\n        [\"we\", \"always-say\", \":\", \"yes\"],   // answer for test 1\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const encoded = solution.encode([...inputs[i]])\n        const answer = solution.decode(encoded);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "https://neetcode.io/problems/string-encode-and-decode",
    "submissions": [
      {
        "grade": 5,
        "submittedAt": "2024-08-21T01:02:18.007Z",
        "solution": "\n\nclass Solution {\n    /**\n     * @param {ListNode} head\n     * @return {number}\n     */\n\n    encode(strs) {\n        let encoded = ''\n        for (let word of strs) {\n            let len = word.length\n            encoded += len + '#' + word\n        }\n        return encoded\n    }\n\n    /**\n     * @param {string} str\n     * @returns {string[]}\n     */\n    decode(str) {\n        const result = []\n\n        let i = 0\n        while (i < str.length) {\n            let j = i\n            while (str[j] !== '#') {\n                j++\n            }\n\n            let len = parseInt( str.substring(i, j) )\n            let word = str.substring(j + 1, j + 1 + len)\n            result.push(word)\n            i = j + 1 + len\n        }\n        return result\n    }\n\n}\n",
        "note": ""
      },
      {
        "grade": 4,
        "submittedAt": "2024-08-12T09:19:03.195Z",
        "solution": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     constructor(val = 0, next = null) {\n *         this.value = val;\n *         this.next = next;\n *     }\n * }\n */\n\n\nclass Solution {\n    /**\n     * @param {ListNode} head\n     * @return {number}\n     */\n\n    encode(strs) {\n        let encoded = '';\n        for (let word of strs) {\n            let length = word.length\n            encoded += length + \"#\" + word\n        }\n        return encoded\n    }\n\n    /**\n     * @param {string} str\n     * @returns {string[]}\n     */\n    decode(encoded) {\n        const result = []\n        for (let i = 0; i < encoded.length; i++) {\n            let j = i\n            while (encoded[j] !== '#') {\n                j++\n            }\n\n            let length = parseInt(encoded.substring(i, j))\n            let word = encoded.substring(j + 1, j + 1 + length)\n            result.push(word)\n            i = j + length\n        }\n        return result\n\n    }\n\n}\n",
        "note": ""
      },
      {
        "grade": 4,
        "submittedAt": "2024-08-11T02:28:22.799Z",
        "solution": null,
        "note": ""
      },
      {
        "grade": 4,
        "submittedAt": "2024-08-06T00:07:08.720Z",
        "solution": null,
        "note": ""
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-21 01:02:18.01",
    "category": "Arrays and Hashing",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 27,
    "uuid": "4a004cd9-7e12-4555-8557-7b478dc12b64",
    "name": "LRU Cache",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "7a306928-6595-40f0-ae19-58b96759be17",
    "categorySlug": "linked-list",
    "slug": "lru-cache",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Linked List",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 16,
    "uuid": "51e409f7-d7a3-4cfa-a309-4bdb9d525d9c",
    "name": "Valid Parentheses",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "cce97604-b7b3-45fd-bf7a-1137958a3cc6",
    "categorySlug": "stack",
    "slug": "valid-parentheses",
    "description": "<p>You are given a string&nbsp;<code class=\"hljs language-ebnf\">s</code>&nbsp;consisting of the following characters:&nbsp;<code class=\"hljs language-java\"><span class=\"token char\">'('</span></code>,&nbsp;<code class=\"hljs language-java\"><span class=\"token char\">')'</span></code>,&nbsp;<code class=\"hljs language-java\"><span class=\"token char\">'{'</span></code>,&nbsp;<code class=\"hljs language-java\"><span class=\"token char\">'}'</span></code>,&nbsp;<code class=\"hljs language-scheme\">'['</code>&nbsp;and&nbsp;<code class=\"hljs language-java\"><span class=\"token char\">']'</span></code>.</p>\n<p>The input string&nbsp;<code class=\"hljs language-ebnf\">s</code>&nbsp;is valid if and only if:</p>\n<ol>\n<li>Every open bracket is closed by the same type of close bracket.</li>\n<li>Open brackets are closed in the correct order.</li>\n<li>Every close bracket has a corresponding open bracket of the same type.</li>\n</ol>\n<p>Return&nbsp;<code class=\"hljs language-java\"><span class=\"token boolean\">true</span></code>&nbsp;if&nbsp;<code class=\"hljs language-ebnf\">s</code>&nbsp;is a valid string, and&nbsp;<code class=\"hljs language-java\"><span class=\"token boolean\">false</span></code>&nbsp;otherwise.</p>\n<p><strong>Example 1:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"[]\"</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n</code></pre>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"><button class=\"copy-to-clipboard-button\" type=\"button\" data-copy-state=\"copy\">Copy</button></div>\n</div>\n</div>\n<p><strong>Example 2:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"([{}])\"</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n</code></pre>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"><button class=\"copy-to-clipboard-button\" type=\"button\" data-copy-state=\"copy\">Copy</button></div>\n</div>\n</div>\n<p><strong>Example 3:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"[(])\"</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n</code></pre>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"><button class=\"copy-to-clipboard-button\" type=\"button\" data-copy-state=\"copy\">Copy</button></div>\n</div>\n</div>\n<p>Explanation: The brackets are not closed in the correct order.</p>",
    "starterCode": "class Solution {\n    /**\n     * @param {string} s\n     * @return {boolean}\n     */\n    isValid(s) {}\n}\n",
    "difficulty": 1,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "https://neetcode.io/problems/validate-parentheses",
    "submissions": [
      {
        "grade": 2,
        "submittedAt": "2024-08-07T02:08:16.044Z",
        "solution": "class Solution {\n    /**\n     * @param {string} s\n     * @return {boolean}\n     */\n    isValid(s) {}\n}\n",
        "note": ""
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-07 02:08:16.043",
    "category": "Stack",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 13,
    "uuid": "56dde45f-52f3-41f5-b604-2b65e29220f8",
    "name": "Best Time To Buy and Sell Stock",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "d029b5ec-f09f-4ce6-a058-b3194e4e4050",
    "categorySlug": "sliding-window",
    "slug": "best-time-to-buy-and-sell-stock",
    "description": "",
    "starterCode": "",
    "difficulty": 1,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Sliding Window",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 33,
    "uuid": "56f05666-9f89-4fcb-b22f-13a230ad5b10",
    "name": "Subtree of Another Tree",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "81b8e5e4-1dce-471f-8229-868c18b05ed7",
    "categorySlug": "trees",
    "slug": "subtree-of-another-tree",
    "description": "",
    "starterCode": "",
    "difficulty": 1,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Trees",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 36,
    "uuid": "57d741d2-cf3c-411c-afb8-f5bc0c495626",
    "name": "Binary Tree Right Side View",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "81b8e5e4-1dce-471f-8229-868c18b05ed7",
    "categorySlug": "trees",
    "slug": "binary-tree-right-side-view",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Trees",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 21,
    "uuid": "5a2cf867-d44e-4bb4-8670-a65c737bd23c",
    "name": "Search In Rotated Sorted Array",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "148ec8c9-7d4c-42b8-b183-dd66e78acbdd",
    "categorySlug": "binary-search",
    "slug": "search-in-rotated-sorted-array",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Binary Search",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 30,
    "uuid": "5d2e0beb-ccb1-48c3-98c9-aed58ba28755",
    "name": "Diameter of Binary Tree",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "81b8e5e4-1dce-471f-8229-868c18b05ed7",
    "categorySlug": "trees",
    "slug": "diameter-of-binary-tree",
    "description": "",
    "starterCode": "",
    "difficulty": 1,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Trees",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 8,
    "uuid": "63b6a0d6-0afb-48f1-9544-c590091dddd5",
    "name": "Longest Consecutive Sequence",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "8a0a2ece-2c33-4b98-837a-45b00aa25c51",
    "categorySlug": "arrays-and-hashing",
    "slug": "longest-consecutive-sequence",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Arrays and Hashing",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 1,
    "uuid": "64320237-4120-47c7-b9d5-1338a89e33c1",
    "name": "Two Sum",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "8a0a2ece-2c33-4b98-837a-45b00aa25c51",
    "categorySlug": "arrays-and-hashing",
    "slug": "two-sum",
    "description": "<p>Given an array of integers&nbsp;<code class=\"hljs language-ebnf\">nums</code>&nbsp;and an integer&nbsp;<code class=\"hljs language-aspectj\">target</code>, return the indices&nbsp;<code class=\"hljs language-css\">i</code>&nbsp;and&nbsp;<code class=\"hljs language-ebnf\">j</code>&nbsp;such that&nbsp;<code class=\"hljs language-inform7\">nums[i] + nums[j] == target</code>&nbsp;and&nbsp;<code class=\"hljs language-erlang-repl\">i != j</code>.</p>\n<p>You may assume that&nbsp;<em>every</em>&nbsp;input has exactly one pair of indices&nbsp;<code class=\"hljs language-css\">i</code>&nbsp;and&nbsp;<code class=\"hljs language-ebnf\">j</code>&nbsp;that satisfy the condition.</p>\n<p>Return the answer with the smaller index first.</p>\n<p><strong>Example 1:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> \nnums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre>\n</div>\n<p>Explanation:&nbsp;<code class=\"hljs language-apache\">nums[0] + nums[1] == 7</code>, so we return&nbsp;<code class=\"hljs language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>&nbsp;<span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code>.</p>\n<p><strong>Example 2:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></code></pre>\n</div>\n<p><strong>Example 3:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre>\n</div>",
    "starterCode": "class Solution {\n    /**\n     * @param {number[]} nums\n     * @param {number} target\n     * @return {number[]}\n     */\n    twoSum(nums, target) {\n        return [0,1]\n    }\n}",
    "difficulty": 1,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "https://leetcode.com/problems/two-sum/",
    "submissions": [
      {
        "grade": 4,
        "submittedAt": "2024-08-06T00:45:09.965Z",
        "solution": "class Solution {\n    /**\n     * @param {number[]} nums\n     * @param {number} target\n     * @return {number[]}\n     */\n    twoSum(nums, target) {\n        return [0,1]\n    }\n}",
        "note": ""
      },
      {
        "grade": 3,
        "submittedAt": "2024-08-03T00:01:38.276Z",
        "solution": null,
        "note": ""
      },
      {
        "grade": 4,
        "submittedAt": "2024-07-30T01:52:10.921Z",
        "solution": null,
        "note": null
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-06 00:45:09.964",
    "category": "Arrays and Hashing",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 38,
    "uuid": "654f61eb-022c-49f8-bc46-51493922ee0b",
    "name": "Validate Binary Search Tree",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "81b8e5e4-1dce-471f-8229-868c18b05ed7",
    "categorySlug": "trees",
    "slug": "validate-binary-search-tree",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Trees",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 18,
    "uuid": "67c43ecb-32d9-4eb8-957b-568794d7810d",
    "name": "Daily Temperatures",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "cce97604-b7b3-45fd-bf7a-1137958a3cc6",
    "categorySlug": "stack",
    "slug": "daily-temperatures",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Stack",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 14,
    "uuid": "69eb66c0-cc1f-4d0d-8c8d-25ede15c7775",
    "name": "Logest Substring Without Repeating Characters",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "d029b5ec-f09f-4ce6-a058-b3194e4e4050",
    "categorySlug": "sliding-window",
    "slug": "logest-substring-without-repeating-characters",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Sliding Window",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 4,
    "uuid": "6a7ffbc5-8cb7-44a4-b1b9-58cec720416c",
    "name": "Group Anagrams",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "8a0a2ece-2c33-4b98-837a-45b00aa25c51",
    "categorySlug": "arrays-and-hashing",
    "slug": "group-anagrams",
    "description": "<p>Given an array of strings&nbsp;<code class=\"hljs language-ebnf\">strs</code>, group all&nbsp;<em>anagrams</em>&nbsp;together into sublists. You may return the output in&nbsp;<strong>any order</strong>.</p>\n<p>An&nbsp;<strong>anagram</strong>&nbsp;is a string that contains the exact same characters as another string, but the order of the characters can be different.</p>\n<p><strong>Example 1:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> strs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"act\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"pots\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"tops\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"stop\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hat\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"hat\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"act\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"stop\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pots\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tops\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"><button class=\"copy-to-clipboard-button\" type=\"button\" data-copy-state=\"copy\">Copy</button></div>\n</div>\n</div>\n<p><strong>Example 2:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> strs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"><button class=\"copy-to-clipboard-button\" type=\"button\" data-copy-state=\"copy\">Copy</button></div>\n</div>\n</div>\n<p><strong>Example 3:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> strs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre>\n</div>",
    "starterCode": "class Solution {\n    /**\n     * @param {string[]} strs\n     * @return {string[][]}\n     */\n    groupAnagrams(strs) {\n    }\n}\n",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [\"act\",\"pots\",\"tops\",\"cat\",\"stop\",\"hat\"], // input for test 1\n        [\"x\"], // input for test 2\n        [\"\"]   // input for test 3\n    ]\n\n    let answers = [\n        [[\"hat\"],[\"act\", \"cat\"],[\"stop\", \"pots\", \"tops\"]],   // answer for test 1\n        [[\"x\"]],  // answer for test 2\n        [[\"\"]], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.groupAnagrams(inputs[i]);\n        console.log(answer)\n        let result = checkAnswer(answer, answers[i])\n        \n        results.push({\n            pass: result ? \"true\" : \"false\",\n            expected: answers[i],\n            recieved: answer\n        });\n        \n    }\n    return results\n\n\n    //  toIncludeSameMembers\n    function checkAnswer(recieved, expected) {\n        if (!recieved) return false\n        if(Object.prototype.toString.call(expected) !== '[object Array]') {\n            return false\n        }\n        if(Object.prototype.toString.call(expected[0]) !== '[object Array]') {\n            return false\n        }\n        if (recieved.length !== expected.length) {\n            return false\n        }\n        let map = {}\n        for (let arr of expected) {\n            let sorted = arr.sort()\n            let key = sorted.join('')\n            map[key] = true\n        }\n        for (let arr of recieved) {\n            let sorted = arr.sort()\n            let key = sorted.join('')\n            if (!(key in map)) return false\n        }\n\n        return true\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "https://neetcode.io/problems/anagram-groups",
    "submissions": [
      {
        "grade": 5,
        "submittedAt": "2024-08-21T00:50:14.689Z",
        "solution": "class Solution {\n    /**\n     * @param {string[]} strs\n     * @return {string[][]}\n     */\n    groupAnagrams(strs) {\n\n        const map = {}\n        for (let word of strs) {\n            let freq = Array(26).fill(0)\n            for (let c of word) {\n                let code = c.charCodeAt(0) - 'a'.charCodeAt(0)\n                freq[code] += 1\n            }\n\n            let key = freq.join()\n            if (! (key in map)) map[key] = []\n            map[key].push(word)\n        }\n        \n        return Object.values(map)\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 5,
        "submittedAt": "2024-08-20T10:50:04.973Z",
        "solution": "class Solution {\n    /**\n     * @param {string[]} strs\n     * @return {string[][]}\n     */\n    groupAnagrams(strs) {\n\n        const freqMemo = {}\n        for (let word of strs) {\n            let freq = Array(26).fill(0)\n            for (let c of word) {\n                const code = c.charCodeAt(0) - 'a'.charCodeAt(0)\n                freq[code] += 1\n            }\n\n            let key = freq.join('')\n\n            if (! (key in freqMemo)) freqMemo[key] = []\n            \n            freqMemo[key].push(word)\n        }\n        return Object.values(freqMemo)\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 5,
        "submittedAt": "2024-08-12T09:59:42.090Z",
        "solution": "class Solution {\n    /**\n     * @param {string[]} strs\n     * @return {string[][]}\n     */\n\n    groupAnagrams(strs) {\n        const result = []\n\n        for (let word of strs) {\n            let freq = new Array(26).fill(0)\n            for (let char of word) {\n                let code = char.charCodeAt(0) - 'a'.charCodeAt(0)\n                freq[code]++\n            }\n            let freqStr = freq.join('')\n            if (!(freqStr in result)) result[freqStr] = []\n            result[freqStr].push(word)\n\n        }\n        return Object.values(result)\n    }\n\n\n}\n",
        "note": ""
      },
      {
        "grade": 5,
        "submittedAt": "2024-08-11T01:55:08.310Z",
        "solution": "class Solution {\n    /**\n     * @param {string[]} strs\n     * @return {string[][]}\n     */\n    groupAnagrams(strs) {\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 4,
        "submittedAt": "2024-08-04T06:26:02.029Z",
        "solution": "class Solution {\n    /**\n     * @param {string[]} strs\n     * @return {string[][]}\n     */\n    groupAnagrams(strs) {\n\n        const freq = {}\n        for (let word of strs) {\n            const freqArr = new Array(26).fill(0)\n            for (let c of word) {\n                let charCode = c.charCodeAt(0) - 'a'.charCodeAt(0)\n                freqArr[charCode] = freqArr[charCode] + 1\n            }\n\n            let key = freqArr.join('')\n            if (!(key in freq)) freq[key] = []\n            freq[key].push(word)\n        }\n\n        return Object.values(freq)\n    }\n}\n",
        "note": ""
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-21 00:50:14.69",
    "category": "Arrays and Hashing",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 17,
    "uuid": "6dc69401-b339-466f-ba2c-060ec7b361fe",
    "name": "Min Stack",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "cce97604-b7b3-45fd-bf7a-1137958a3cc6",
    "categorySlug": "stack",
    "slug": "min-stack",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Stack",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 9,
    "uuid": "7a46fcd6-ffe8-437d-8145-6a132e819218",
    "name": "Valid Palindrome",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "ec4b276a-feec-4529-80e1-5475e299ea0f",
    "categorySlug": "two-pointers",
    "slug": "valid-palindrome",
    "description": "<p>Given a string&nbsp;<code class=\"hljs language-ebnf\">s</code>, return&nbsp;<code class=\"hljs language-java\"><span class=\"token boolean\">true</span></code>&nbsp;if it is a&nbsp;<strong>palindrome</strong>, otherwise return&nbsp;<code class=\"hljs language-java\"><span class=\"token boolean\">false</span></code>.</p>\n<p>A&nbsp;<strong>palindrome</strong>&nbsp;is a string that reads the same forward and backward. It is also case-insensitive and ignores all non-alphanumeric characters.</p>\n<p><strong>Example 1:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Was it a car or a cat I saw?\"</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n</code></pre>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"><button class=\"copy-to-clipboard-button\" type=\"button\" data-copy-state=\"copy\">Copy</button></div>\n</div>\n</div>\n<p>Explanation: After considering only alphanumerical characters we have \"wasitacaroracatisaw\", which is a palindrome.</p>\n<p><strong>Example 2:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"tab a cat\"</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n</code></pre>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"><button class=\"copy-to-clipboard-button\" type=\"button\" data-copy-state=\"copy\">Copy</button></div>\n</div>\n</div>\n<p>Explanation: \"tabacat\" is not a palindrome.</p>\n<pre>&nbsp;</pre>",
    "starterCode": "class Solution {\n    /**\n     * @param {string} s\n     * @return {boolean}\n     */\n    isPalindrome(s) {}\n}\n",
    "difficulty": 1,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n    let inputs = [\n        \"Was it a car or a cat I saw?\", // input for test 1\n        \"tab a cat\", // input for test 2\n    ]\n\n    let answers = [\n        true,   // answer for test 1\n        false,  // answer for test 2\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.isPalindrome(inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [
      {
        "grade": 5,
        "submittedAt": "2024-08-21T00:53:05.026Z",
        "solution": "class Solution {\n    /**\n     * @param {string} s\n     * @return {boolean}\n     */\n    isPalindrome(s) {\n        s = s.replace(/[^0-9a-z]/gi, \"\").toLowerCase()\n        let l = 0\n        let r = s.length -1\n\n        while (l<r) {\n            if (s[l] !== s[r]) return false\n            l++\n            r--\n        }\n\n        return true\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 5,
        "submittedAt": "2024-08-20T10:41:47.475Z",
        "solution": "class Solution {\n    /**\n     * @param {string} s\n     * @return {boolean}\n     */\n    isPalindrome(s) {\n        s = s.replace(/[^0-9a-z_]/gi, \"\").toLowerCase()\n        console.log(s)\n        let l=0\n        let r=s.length -1\n        while (l<=r) {\n\n            if (s[l] !== s[r]) return false\n            l++\n            r--\n        }\n\n        return true\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 4,
        "submittedAt": "2024-08-13T02:04:16.788Z",
        "solution": "class Solution {\n    /**\n     * @param {string} s\n     * @return {boolean}\n     */\n    isPalindrome(s) {\n        s = s.replace(/[^a-z0-9_-]/gi, \"\").toLowerCase()\n        let l = 0\n        let r = s.length - 1\n        while (l<r) {\n            if (s[l] !== s[r]) return false\n            l++\n            r--\n        }\n        return true\n    }\n}\n",
        "note": ""
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-21 00:53:05.026",
    "category": "Two Pointers",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 2,
    "uuid": "7def2f7e-ac79-4650-ae2f-f296c0d0e661",
    "name": "Valid Anagram",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "8a0a2ece-2c33-4b98-837a-45b00aa25c51",
    "categorySlug": "arrays-and-hashing",
    "slug": "valid-anagram",
    "description": "<p>Given two strings&nbsp;<code class=\"hljs language-ebnf\">s</code>&nbsp;and&nbsp;<code class=\"hljs language-ebnf\">t</code>, return&nbsp;<code class=\"hljs language-java\"><span class=\"token boolean\">true</span></code>&nbsp;if the two strings are anagrams of each other, otherwise return&nbsp;<code class=\"hljs language-java\"><span class=\"token boolean\">false</span></code>.</p>\n<p>An&nbsp;<strong>anagram</strong>&nbsp;is a string that contains the exact same characters as another string, but the order of the characters can be different.</p>\n<p><strong>Example 1:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"racecar\"</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">=</span> <span class=\"token string\">\"carrace\"</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n</code></pre>\n</div>\n<p><strong>Example 2:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"jar\"</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">=</span> <span class=\"token string\">\"jam\"</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n</code></pre>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\">&nbsp;</div>\n</div>\n</div>",
    "starterCode": "\nclass Solution {\n    /**\n     * @param {string} s\n     * @param {string} t\n     * @return {number[]}\n     */\n\n    isAnagram(s, t) {\n    }\n}\n",
    "difficulty": 1,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [\"racecar\", \"carrace\"], // input for test 1\n        [\"jar\", \"jam\"], // input for test 2\n    ]\n\n    let answers = [\n        true,   // answer for test 1\n        false,  // answer for test 2\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.isAnagram(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "https://neetcode.io/problems/is-anagram",
    "submissions": [
      {
        "grade": 5,
        "submittedAt": "2024-08-24T11:28:18.996Z",
        "solution": "\nclass Solution {\n    /**\n     * @param {string} s\n     * @param {string} t\n     * @return {number[]}\n     */\n\n    isAnagram(s, t) {\n        if (s.length !== t.length) return false\n        const sMap = {}\n        const tMap = {}\n\n        for (let c = 0; c < s.length; c++) {\n            sMap[s[c]] = (sMap[s[c]] || 0) + 1\n            tMap[t[c]] = (tMap[t[c]] || 0) + 1\n        }\n\n        for (let m in sMap) {\n            if (sMap[m] !== tMap[m]) return false\n        }\n        return true\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 5,
        "submittedAt": "2024-08-11T01:02:39.817Z",
        "solution": "\nclass Solution {\n    /**\n     * @param {string} s\n     * @param {string} t\n     * @return {number[]}\n     */\n\n    isAnagram(s, t) {\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 4,
        "submittedAt": "2024-08-06T00:55:42.676Z",
        "solution": "\nclass Solution {\n    /**\n     * @param {string} s\n     * @param {string} t\n     * @return {number[]}\n     */\n\n    isAnagram(s, t) {\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 3,
        "submittedAt": "2024-08-02T09:09:06.733Z",
        "solution": null,
        "note": ""
      },
      {
        "grade": 3,
        "submittedAt": "2024-08-02T08:44:06.013Z",
        "solution": null,
        "note": ""
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-24 11:28:18.996",
    "category": "Arrays and Hashing",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 19,
    "uuid": "8040e8ca-1f30-4d64-a667-934763abefbf",
    "name": "Binary Search",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "148ec8c9-7d4c-42b8-b183-dd66e78acbdd",
    "categorySlug": "binary-search",
    "slug": "binary-search",
    "description": "",
    "starterCode": "class Solution {\n    /**\n     * @param {number[]} arr\n     * @param {number} target\n     * @return {number} index\n     */\n    search(arr, target) {}\n}\n",
    "difficulty": 1,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[1, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 4], // input for test 1\n        [[1, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 10], // input for test 2\n    ]\n\n    let answers = [\n        -1,   // answer for test 1\n        6,  // answer for test 2\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.search(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [
      {
        "grade": 4,
        "submittedAt": "2024-08-20T10:05:51.989Z",
        "solution": "class Solution {\n    /**\n     * @param {number[]} arr\n     * @param {number} target\n     * @return {number} index\n     */\n    search(arr, target) {\n\n        let l = 0\n        let r = arr.length-1\n\n        while(l <= r) {\n            let mid = Math.floor( (l + r) / 2)\n            if (arr[mid] === target) return mid\n            if (arr[mid] < target) l = mid + 1\n            if (arr[mid] > target) r = mid - 1\n        }\n        return -1\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 4,
        "submittedAt": "2024-08-16T07:22:54.136Z",
        "solution": "class Solution {\n    /**\n     * @param {number[]} arr\n     * @param {number} target\n     * @return {number} index\n     */\n    search(arr, target) {\n        let l = 0\n        let r = arr.length -1\n\n        while(l<=r) {\n            const mid = Math.floor( (l+r) / 2)\n            if (arr[mid] === target) return mid\n            if (arr[mid] < target) l = mid + 1\n            if (arr[mid] > target) r = mid - 1\n        }\n        return -1\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 4,
        "submittedAt": "2024-08-13T01:53:40.288Z",
        "solution": "class Solution {\n    /**\n     * @param {number[]} arr\n     * @param {number} target\n     * @return {number} index\n     */\n    search(arr, target) {\n        let l = 0\n        let r = arr.length -1\n\n        while (l<r) {\n            let mid = Math.floor((l + r) /2)\n            if (arr[mid] === target) return mid\n            if (arr[mid] < target ) l = mid + 1\n            if (arr[mid] > target ) r = mid - 1 \n        }\n\n        return -1\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 4,
        "submittedAt": "2024-08-11T01:30:04.960Z",
        "solution": null,
        "note": ""
      },
      {
        "grade": 2,
        "submittedAt": "2024-08-07T02:26:21.967Z",
        "solution": null,
        "note": ""
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-20 10:05:51.989",
    "category": "Binary Search",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 49,
    "uuid": "82d52134-f432-4fc1-8270-01ea2bfb5ab6",
    "name": "Course Schedule II",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "be4df1a2-2e5a-4df0-b6a8-f1881c2f25fa",
    "categorySlug": "graphs",
    "slug": "course-schedule-ii",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Graphs",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 10,
    "uuid": "897f8e25-3f4a-483b-bd5f-239ac9a8da98",
    "name": "Two Sum II Input Array is Sorted",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "ec4b276a-feec-4529-80e1-5475e299ea0f",
    "categorySlug": "two-pointers",
    "slug": "two-sum-ii-input-array-is-sorted",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Two Pointers",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 15,
    "uuid": "9421c06e-2a01-45e9-ab87-71cfbdc75d1e",
    "name": "Longest Repeating Character Replacement",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "d029b5ec-f09f-4ce6-a058-b3194e4e4050",
    "categorySlug": "sliding-window",
    "slug": "longest-repeating-character-replacement",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Sliding Window",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 3,
    "uuid": "976e940d-3802-47fc-8113-6f1904b333f2",
    "name": "Contains Duplicate",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "8a0a2ece-2c33-4b98-837a-45b00aa25c51",
    "categorySlug": "arrays-and-hashing",
    "slug": "contains-duplicate",
    "description": "",
    "starterCode": "",
    "difficulty": 1,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [
      {
        "grade": 5,
        "submittedAt": "2024-08-06T00:48:02.028Z",
        "solution": null,
        "note": ""
      },
      {
        "grade": 4,
        "submittedAt": "2024-07-30T01:52:10.923Z",
        "solution": null,
        "note": null
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-06 00:48:02.029",
    "category": "Arrays and Hashing",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 44,
    "uuid": "9cc89ef9-7e62-47bc-a79a-24cec10af430",
    "name": "Max Area of Islands",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "be4df1a2-2e5a-4df0-b6a8-f1881c2f25fa",
    "categorySlug": "graphs",
    "slug": "max-area-of-islands",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Graphs",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 50,
    "uuid": "9ec75561-b174-4b5f-8445-524c6581a0ee",
    "name": "Sum Values",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "7a306928-6595-40f0-ae19-58b96759be17",
    "categorySlug": "linked-list",
    "slug": "sum-values",
    "description": "<p>Write a function,&nbsp;<em>sumList</em>, that takes in the head of a linked list containing numbers as an argument. The function should return the total sum of all values in the linked list.</p>\n<div>\n<div>test_00</div>\n</div>\n<div>\n<div class=\"cm-theme\">\n<div class=\"cm-editor ͼ1 ͼ2 ͼ4 ͼ2u ͼ19\">\n<div class=\"cm-announced\" aria-live=\"polite\">&nbsp;</div>\n<div class=\"cm-scroller\" tabindex=\"-1\">\n<div class=\"cm-content\" role=\"textbox\" contenteditable=\"true\" spellcheck=\"false\" translate=\"no\" aria-multiline=\"true\" aria-readonly=\"true\" data-language=\"javascript\" aria-autocomplete=\"list\">\n<p>const a = new Node(2);<br>const b = new Node(8);<br>const c = new Node(3);<br>const d = new Node(-1);<br>const e = new Node(7);</p>\n<p>a.next = b;<br>b.next = c;<br>c.next = d;<br>d.next = e;</p>\n<p>// 2 -&gt; 8 -&gt; 3 -&gt; -1 -&gt; 7</p>\n<p>sumList(a); // 19</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
    "starterCode": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     constructor(val = 0, next = null) {\n *         this.value = val;\n *         this.next = next;\n *     }\n * }\n */\n\n\nclass Solution {\n    /**\n     * @param {ListNode} head\n     * @return {number}\n     */\n\n    sumList() {\n    }\n}\n",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "class Node {\n    constructor(value) {\n        this.value = value\n        this.next = null\n    }\n}\nconst a = new Node(2);\nconst b = new Node(8);\nconst c = new Node(3);\nconst d = new Node(-1);\nconst e = new Node(7);\n\na.next = b;\nb.next = c;\nc.next = d;\nd.next = e;\n\n\n(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [a], // input for test 1\n    ]\n\n    let answers = [\n        19,   // answer for test 1\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.sumList(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [
      {
        "grade": 5,
        "submittedAt": "2024-08-21T01:10:24.913Z",
        "solution": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     constructor(val = 0, next = null) {\n *         this.value = val;\n *         this.next = next;\n *     }\n * }\n */\n\n\nclass Solution {\n    /**\n     * @param {ListNode} head\n     * @return {number}\n     */\n\n    sumList() {\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 5,
        "submittedAt": "2024-08-12T07:46:14.926Z",
        "solution": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     constructor(val = 0, next = null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\n\n\nclass Solution {\n    /**\n     * @param {ListNode} head\n     * @return {number}\n     */\n\n    sumList(list) {\n        let sum = 0;\n        let current = list\n        while(current !== null) {\n            sum += current.value\n            current = current.next\n        }\n        return sum\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 5,
        "submittedAt": "2024-08-06T23:10:57.231Z",
        "solution": null,
        "note": ""
      },
      {
        "grade": 5,
        "submittedAt": "2024-07-30T01:52:10.930Z",
        "solution": null,
        "note": null
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-21 01:10:24.914",
    "category": "Linked List",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 25,
    "uuid": "9f67a889-6e32-4a4f-b3c5-4203a3cd4e5b",
    "name": "Remove Nth Node From End of List",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "7a306928-6595-40f0-ae19-58b96759be17",
    "categorySlug": "linked-list",
    "slug": "remove-nth-node-from-end-of-list",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [
      {
        "grade": 3,
        "submittedAt": "2024-08-25T00:54:41.288Z",
        "solution": null,
        "note": ""
      },
      {
        "grade": 4,
        "submittedAt": "2024-08-11T01:21:10.211Z",
        "solution": null,
        "note": ""
      },
      {
        "grade": 0,
        "submittedAt": "2024-08-07T00:47:06.283Z",
        "solution": null,
        "note": ""
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-25 00:54:41.288",
    "category": "Linked List",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 11,
    "uuid": "9f7be494-f1a2-46d0-aad9-db50bef0dcc1",
    "name": "3 Sum",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "ec4b276a-feec-4529-80e1-5475e299ea0f",
    "categorySlug": "two-pointers",
    "slug": "3-sum",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Two Pointers",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 23,
    "uuid": "9f7eaa92-7dc5-4997-9f92-6dd1f393a45d",
    "name": "Merge Two Sorted Linked Lists",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "7a306928-6595-40f0-ae19-58b96759be17",
    "categorySlug": "linked-list",
    "slug": "merge-two-sorted-linked-lists",
    "description": "<p>You are given the heads of two sorted linked lists&nbsp;<code class=\"hljs language-undefined\">list1</code>&nbsp;and&nbsp;<code class=\"hljs language-undefined\">list2</code>.</p>\n<p>Merge the two lists into one&nbsp;<strong>sorted</strong>&nbsp;linked list and return the head of the new sorted linked list.</p>\n<p>The new list should be made up of nodes from&nbsp;<code class=\"hljs language-undefined\">list1</code>&nbsp;and&nbsp;<code class=\"hljs language-undefined\">list2</code>.</p>",
    "starterCode": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     constructor(val = 0, next = null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param {ListNode} list1\n     * @param {ListNode} list2\n     * @return {ListNode}\n     */\n    mergeTwoLists(list1, list2) {}\n}\n",
    "difficulty": 1,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "https://neetcode.io/problems/merge-two-sorted-linked-lists",
    "submissions": [
      {
        "grade": 2,
        "submittedAt": "2024-08-06T23:49:18.130Z",
        "solution": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     constructor(val = 0, next = null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param {ListNode} list1\n     * @param {ListNode} list2\n     * @return {ListNode}\n     */\n    mergeTwoLists(list1, list2) {}\n}\n",
        "note": ""
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-06 23:49:18.129",
    "category": "Linked List",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 5,
    "uuid": "a475df69-a0d0-4109-b7ea-6309190e8298",
    "name": "Top K Frequent Elemements",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "8a0a2ece-2c33-4b98-837a-45b00aa25c51",
    "categorySlug": "arrays-and-hashing",
    "slug": "top-k-frequent-elemements",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [
      {
        "grade": 3,
        "submittedAt": "2024-08-24T00:40:42.077Z",
        "solution": null,
        "note": ""
      },
      {
        "grade": 2,
        "submittedAt": "2024-08-06T02:02:56.437Z",
        "solution": null,
        "note": ""
      },
      {
        "grade": 5,
        "submittedAt": "2024-07-30T01:52:10.926Z",
        "solution": null,
        "note": null
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-24 00:40:42.077",
    "category": "Arrays and Hashing",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 6,
    "uuid": "b673a4a8-fa87-4279-a0ea-c323ec5fb5ff",
    "name": "Valid Soduoku",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "8a0a2ece-2c33-4b98-837a-45b00aa25c51",
    "categorySlug": "arrays-and-hashing",
    "slug": "valid-soduoku",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Arrays and Hashing",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 22,
    "uuid": "b9186ace-fc6e-4430-b8e7-d16cbe35648d",
    "name": "Reverse Linked List",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "7a306928-6595-40f0-ae19-58b96759be17",
    "categorySlug": "linked-list",
    "slug": "reverse-linked-list",
    "description": "<p>Given the beginning of a singly linked list&nbsp;<code class=\"hljs language-bash\"><span class=\"token function\">head</span></code>, reverse the list, and return the new beginning of the list.</p>\n<p><strong>Example 1:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> head <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"><button class=\"copy-to-clipboard-button\" type=\"button\" data-copy-state=\"copy\">Copy</button></div>\n</div>\n</div>\n<p><strong>Example 2:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> head <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre>\n</div>",
    "starterCode": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     constructor(val = 0, next = null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\n\n\nclass Solution {\n    /**\n     * @param {ListNode} head\n     * @return {ListNode}\n     */\n\n    reverseList() {\n    }\n}\n",
    "difficulty": 1,
    "answerCode": null,
    "testCode": "class Node {\n    constructor(value) {\n        this.value = value\n        this.next = null\n    }\n}\nconst a = new Node(\"a\");\nconst b = new Node(\"b\");\nconst c = new Node(\"c\");\nconst d = new Node(\"d\");\n\na.next = b;\nb.next = c;\nc.next = d;\n\n\n(function() {\n    // Update the inputs and expexted answers below\n    let inputs = [\n        [a], // input for test 1\n    ]\n\n    let answers = [\n        [\"d\", \"c\", \"b\", \"a\"],   // answer for test 1\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.reverseList(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: listToArray(answer)\n        });\n    }\n    return results\n\n\n\n    function listToArray(head) {\n        const result = []\n        let current = head\n        while (current !== null) {\n            result.push(current.value)\n            current = current.next\n        }\n        return result\n    }\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(listToArray(recieved), expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n\n\n\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "https://neetcode.io/problems/reverse-a-linked-list",
    "submissions": [
      {
        "grade": 5,
        "submittedAt": "2024-08-24T11:30:14.259Z",
        "solution": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     constructor(val = 0, next = null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\n\n\nclass Solution {\n    /**\n     * @param {ListNode} head\n     * @return {ListNode}\n     */\n\n    reverseList(head, prev = null) {\n        if (head === null) return prev\n        const temp = head.next\n        head.next = prev\n        return this.reverseList(temp, head)\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 4,
        "submittedAt": "2024-08-06T23:09:14.282Z",
        "solution": null,
        "note": ""
      },
      {
        "grade": 3,
        "submittedAt": "2024-08-06T04:07:44.525Z",
        "solution": null,
        "note": ""
      },
      {
        "grade": 5,
        "submittedAt": "2024-07-30T01:52:10.928Z",
        "solution": null,
        "note": null
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-24 11:30:14.259",
    "category": "Linked List",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 34,
    "uuid": "c5119dcf-a20d-485e-81ec-232b11cfeabb",
    "name": "Lowest Common Ancestor of a Binary Search Tree",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "81b8e5e4-1dce-471f-8229-868c18b05ed7",
    "categorySlug": "trees",
    "slug": "lowest-common-ancestor-of-a-binary-search-tree",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Trees",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 7,
    "uuid": "c91bf786-3623-494e-a615-c8a38ea1fb71",
    "name": "Product of Array Except Self",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "8a0a2ece-2c33-4b98-837a-45b00aa25c51",
    "categorySlug": "arrays-and-hashing",
    "slug": "product-of-array-except-self",
    "description": "<p>Given an integer array&nbsp;<code class=\"hljs language-ebnf\">nums</code>, return an array&nbsp;<code class=\"hljs language-ebnf\">output</code>&nbsp;where&nbsp;<code class=\"hljs language-css\">output[i]</code>&nbsp;is the product of all the elements of&nbsp;<code class=\"hljs language-ebnf\">nums</code>&nbsp;except&nbsp;<code class=\"hljs language-css\">nums[i]</code>.</p>\n<p>Each product is&nbsp;<strong>guaranteed</strong>&nbsp;to fit in a&nbsp;<strong>32-bit</strong>&nbsp;integer.</p>\n<p>Follow-up: Could you solve it in&nbsp;<span class=\"katex\"><span class=\"katex-mathml\">𝑂(𝑛)</span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord mathnormal\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>&nbsp;time without using the division operation?</p>\n<p><strong>Example 1:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"><button class=\"copy-to-clipboard-button\" type=\"button\" data-copy-state=\"copy\">Copy</button></div>\n</div>\n</div>\n<p><strong>Example 2:</strong></p>\n<div class=\"code-toolbar\">\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"hljs language-java\"><span class=\"token class-name\">Input</span><span class=\"token operator\">:</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token class-name\">Output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></code></pre>\n</div>",
    "starterCode": "class Solution {\n    /**\n     * @param {number[]} nums\n     * @return {number[]}\n     */\n    productExceptSelf(nums) {}\n}\n",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    const handler = 'productExceptSelf'\n\n    // Update the inputs and expexted answers below\n    let inputs = [\n        [1,2,4,6], // input for test 1\n        [-1,0,1,2,3], // input for test 2\n    ]\n\n    let answers = [\n        [48,24,12,8],   // answer for test 1\n        [0,-6,0,0,0],  // answer for test 2\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution[handler]([...inputs[i]]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "https://neetcode.io/problems/products-of-array-discluding-self",
    "submissions": [
      {
        "grade": 4,
        "submittedAt": "2024-08-21T01:46:39.937Z",
        "solution": "class Solution {\n    /**\n     * @param {number[]} nums\n     * @return {number[]}\n     */\n    productExceptSelf(nums) {\n        let prefix = 1\n        let postfix = 1\n        let prefixArr = []\n        let postfixArr = []\n\n        for (let n of nums) {\n            prefixArr.push(prefix)\n            prefix *= n\n        }\n\n        for (let i=nums.length - 2; i>=0; i--) {\n            postfix *= nums[i + 1]\n            postfixArr[i] = postfix\n        }\n        postfixArr.push(1)\n        const result = []\n        for (let i=0; i<nums.length; i++) {\n            result[i] = prefixArr[i] * postfixArr[i]\n        }\n\n        return result\n\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 5,
        "submittedAt": "2024-08-12T07:31:22.067Z",
        "solution": "class Solution {\n    /**\n     * @param {number[]} nums\n     * @return {number[]}\n     */\n    productExceptSelf(nums) {\n        const result = []\n        let prefix = 1\n        let postfix = 1\n    \n        for (let n of nums) {\n            result.push(prefix)\n            prefix *= n\n        }\n        for (let i = nums.length - 2; i>=0; i--) {\n            postfix *= nums[i+1]\n            result[i] *= postfix\n        }\n\n        return result\n        \n\n\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 2,
        "submittedAt": "2024-08-11T01:43:11.507Z",
        "solution": "class Solution {\n    /**\n     * @param {number[]} nums\n     * @return {number[]}\n     */\n    productExceptSelf(nums) {}\n}\n",
        "note": ""
      },
      {
        "grade": 3,
        "submittedAt": "2024-08-06T00:33:21.544Z",
        "solution": "class Solution {\n    /**\n     * @param {number[]} nums\n     * @return {number[]}\n     */\n    productExceptSelf(nums) {}\n}\n",
        "note": ""
      },
      {
        "grade": 5,
        "submittedAt": "2024-07-30T01:52:10.928Z",
        "solution": null,
        "note": null
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-21 01:46:39.937",
    "category": "Arrays and Hashing",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 47,
    "uuid": "d0eff7c1-6fa8-4454-b7d4-763674ff7426",
    "name": "Surrounded Regions",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "be4df1a2-2e5a-4df0-b6a8-f1881c2f25fa",
    "categorySlug": "graphs",
    "slug": "surrounded-regions",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Graphs",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 28,
    "uuid": "d391bef3-0987-4360-b399-6918f899fb3b",
    "name": "Invert Binary Tree",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "81b8e5e4-1dce-471f-8229-868c18b05ed7",
    "categorySlug": "trees",
    "slug": "invert-binary-tree",
    "description": "",
    "starterCode": "",
    "difficulty": 1,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Trees",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 46,
    "uuid": "d41923b7-24ac-42ac-8b77-7f556489ef0f",
    "name": "Pacific Atlantic Water Flow",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "be4df1a2-2e5a-4df0-b6a8-f1881c2f25fa",
    "categorySlug": "graphs",
    "slug": "pacific-atlantic-water-flow",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Graphs",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 35,
    "uuid": "e630d7a8-e590-439b-bbc0-addf75796b1f",
    "name": "Binary Tree Level Order Traversal",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "81b8e5e4-1dce-471f-8229-868c18b05ed7",
    "categorySlug": "trees",
    "slug": "binary-tree-level-order-traversal",
    "description": "",
    "starterCode": "",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [],
    "type": "code",
    "lastSubmitted": "",
    "category": "Trees",
    "createdAt": "2024-07-29T15:52:10.916Z"
  },
  {
    "id": 53,
    "uuid": "ec8a6b1f-2db4-4653-836d-245cbe863694",
    "name": "Shortest Path",
    "courseId": "736e3ab5-4ba3-4a3c-baa2-1674fa4b79c0",
    "categoryUuid": "be4df1a2-2e5a-4df0-b6a8-f1881c2f25fa",
    "categorySlug": "graphs",
    "slug": "shortest-path",
    "description": "",
    "starterCode": "// some comment\n\nclass Solution {\n    hasCycle() {\n        const pink = {\n            effin: 'one',\n            \"duo\": 4\n        }\n        \n        console.log('cycling')\n        console.log(pink)\n        return 3+5\n    }\n}\n",
    "difficulty": 2,
    "answerCode": null,
    "testCode": "(function() {\n\n    // Update the inputs and expexted answers below\n\n    let inputs = [\n        [[3,4,5,6], 7], // input for test 1\n        [[4,5,6], 10], // input for test 2\n        [[5,5], 10]   // input for test 3\n    ]\n\n    let answers = [\n        [0, 1],   // answer for test 1\n        [0, 2],  // answer for test 2\n        [0, 1], // answer for test 3\n    ]\n\n    const results = [];\n\n    for (let i=0; i<inputs.length; i++) {\n        const solution = new Solution();\n        const answer = solution.twoSum(...inputs[i]);\n        results.push({\n            pass: checkAnswer(answer, answers[i]),\n            expected: answers[i],\n            recieved: answer\n        });\n    }\n    return results\n\n\n    function checkAnswer(recieved, expected) {\n        if(Object.prototype.toString.call(expected) === '[object Array]') {\n            return arraysEqual(recieved, expected) ? 'true' : 'false'\n        }\n\n        return recieved === expected ? 'true' : 'false'\n    }\n\n    function arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n\n})()",
    "link": "",
    "submissions": [
      {
        "grade": 4,
        "submittedAt": "2024-08-25T01:05:15.513Z",
        "solution": "// some comment\n\nclass Solution {\n    hasCycle() {\n        const pink = {\n            effin: 'one',\n            \"duo\": 4\n        }\n        \n        console.log('cycling')\n        console.log(pink)\n        return 3+5\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 4,
        "submittedAt": "2024-08-11T00:55:14.144Z",
        "solution": "// some comment\n\nclass Solution {\n    hasCycle() {\n        const pink = {\n            effin: 'one',\n            \"duo\": 4\n        }\n        \n        console.log('cycling')\n        console.log(pink)\n        return 3+5\n    }\n}\n",
        "note": ""
      },
      {
        "grade": 5,
        "submittedAt": "2024-07-30T01:52:10.932Z",
        "solution": null,
        "note": null
      }
    ],
    "type": "code",
    "lastSubmitted": "2024-08-25 01:05:15.513",
    "category": "Graphs",
    "createdAt": "2024-07-29T15:52:10.916Z"
  }
]